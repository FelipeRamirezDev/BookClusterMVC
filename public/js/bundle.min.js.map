{"version":3,"sources":["fetch-recommended-books.js"],"names":["apiURL","fetchRecommendedBooks","async","bookName","response","fetch","encodeURIComponent","method","headers","ok","success","message","recommendations","json","length","renderRecommendedBooks","error","console","showBookModal","book","modal","document","getElementById","querySelector","src","image_url","textContent","title","ISBN","author","publisher","year","style","display","addEventListener","window","event","target","books","booksGrid","innerHTML","forEach","bookCard","createElement","classList","add","appendChild","getRecommendations","search","inputField","suggestionsList","inputClear","query","value","suggestions","results","li","trim","result"],"mappings":"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","file":"bundle.min.js","sourcesContent":["const apiURL = \"http://127.0.0.1:5000\";\n// Función para obtener las recomendaciones de libros\nconst fetchRecommendedBooks = async (bookName) => {\n    try {\n        const response = await fetch(`${apiURL}/recommend?book_name=${encodeURIComponent(bookName)}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n\n        if (!response.ok) {\n            return { success: false, message: \"No se encontraron recomendaciones\" };\n        }\n\n        const data = await response.json(); // Convertir la respuesta a JSON\n        const recommendations = data.recommendations || []; // Acceder a la lista de recomendaciones\n\n        // Si no hay recomendaciones\n        if (recommendations.length === 0) {\n            return { success: false, message: `No se encontraron recomendaciones para: ${bookName}` };\n        }\n\n        renderRecommendedBooks(recommendations);\n        return { success: true };\n\n    } catch (error) {\n        console.error('Error al obtener recomendaciones:', error);\n        return { success: false, message: \"Ocurrió un error al obtener recomendaciones.\" };\n    }\n};\n\n\nconst showBookModal = (book) => {\n    const modal = document.getElementById('book-modal');\n    modal.querySelector('#modal-image').src = book.image_url;\n    modal.querySelector('#modal-title').textContent = book.title;\n    modal.querySelector('#modal-isbn').textContent = `ISBN: ${book.ISBN}`;\n    modal.querySelector('#modal-author').textContent = `Autor: ${book.author}`;\n    modal.querySelector('#modal-publisher').textContent = `Editorial: ${book.publisher}`;\n    modal.querySelector('#modal-year').textContent = `Año: ${book.year}`;\n\n    modal.style.display = 'block'; // Mostrar el modal\n\n    const closeButton = modal.querySelector('.close-button');\n\n    closeButton.addEventListener('click', () => {\n        modal.style.display = 'none';\n    });\n\n    window.addEventListener('click', (event) => {\n        if (event.target === modal) {\n            modal.style.display = 'none';\n        }\n    });\n};\n\n\n// Función para renderizar los libros recomendados\nconst renderRecommendedBooks = (books) => {\n    const booksGrid = document.querySelector('.recommended-books__grid');\n    booksGrid.innerHTML = ''; // Limpiar contenido previo\n\n    books.forEach(book => {\n        const bookCard = document.createElement('div');\n        bookCard.classList.add('book-card');\n\n        bookCard.innerHTML = `\n            <h3>${book.title}</h3>\n            <img src='${book.image_url}' alt='${book.title}'>\n            <p>${book.author}</p>\n        `;\n\n        // Agregar evento para mostrar modal al hacer clic\n        bookCard.addEventListener('click', () => showBookModal(book));\n\n        booksGrid.appendChild(bookCard);\n    });\n};\n\n// Función principal para las sugerencias y eventos\n// Función principal para las sugerencias y eventos\nconst getRecommendations = () => {\n    const search = document.querySelector('.search');\n    const inputField = search.querySelector('.input-books');\n    const suggestionsList = search.querySelector('.suggestions-list');\n    const inputClear = search.querySelector('.btn-cleare');\n\n    if(!inputField || !suggestionsList || !inputClear) {\n        console.error('No se encontraron los elementos necesarios');\n        return;\n    }\n\n    // Obtener sugerencias mientras el usuario escribe\n    inputField.addEventListener('input', async () => {\n        const query = inputField.value;\n        if (query.length < 2) {\n            suggestionsList.innerHTML = ''; // Limpiar las sugerencias si no hay texto\n            return;\n        }\n\n        try {\n            const response = await fetch(`${apiURL}/search?query=${encodeURIComponent(query)}`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            });\n\n            const data = await response.json();\n            const suggestions = data.results;\n\n            suggestionsList.innerHTML = ''; // Limpiar las sugerencias previas\n\n            suggestions.forEach(book => {\n                const li = document.createElement('li');\n                li.textContent = book.title;\n                li.classList.add('suggestion-item');\n                li.addEventListener('click', () => {\n                    inputField.value = book.title; // Completar el input con la sugerencia seleccionada\n                    suggestionsList.innerHTML = ''; // Limpiar las sugerencias después de seleccionar\n                });\n                suggestionsList.appendChild(li);\n            });\n        } catch (error) {\n            console.error('Error al obtener sugerencias:', error);\n        }\n    });\n\n    // Limpiar el campo de entrada y las sugerencias\n    inputClear.addEventListener('click', () => {\n        inputField.value = '';\n        suggestionsList.innerHTML = '';\n    });\n\n    const title = document.querySelector('.recommended-books__title');\n    const booksGrid = document.querySelector('.recommended-books__grid');\n\n    // Evento para buscar recomendaciones al hacer clic en el botón de búsqueda\n    document.querySelector('.btn-search').addEventListener('click', async () => {\n        const bookName = inputField.value.trim();\n        if (bookName) {\n            const result = await fetchRecommendedBooks(bookName);\n                \n            if(!result.success) {\n                title.textContent = `${result.message} para ${bookName}`; // Mostrar mensaje si no hay recomendaciones\n                booksGrid.innerHTML = ''; // Limpiar contenido previo\n            } else {\n                title.textContent = `Libros recomendados para: ${bookName}`;\n            }\n        }\n    });\n};\n\n// Inicializar las funciones\n(() => {\n    getRecommendations();\n})();\n"]}